[build-system]
requires = ["flit_core >=3.2"]
build-backend = "flit_core.buildapi"

[project]
name = "node_graph"
dynamic = ["version"]  # read from aiida_workgraph/__init__.py
description = "Create node-based workflow"
authors = [{ name = "Xing Wang", email = "xingwang1991@gmail.com" }]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["graph", "workflows"]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering"
]

dependencies = [
    "numpy",
    "scipy",
    "click",
    "pyyaml",
    "colorama",
    "termcolor",
    "cloudpickle"
]

[project.urls]
Documentation = "https://node-graph.readthedocs.io"
Source = "https://github.com/scinode/node-graph"


[project.optional-dependencies]
docs = [
    "sphinx_rtd_theme",
    "sphinx~=7.2",
    "nbsphinx",
]
pre-commit = [
    "pre-commit~=2.2",
    "pylint~=2.17.4",
]
tests = [
    "pytest~=7.0",
    "pytest-cov~=2.7,<2.11",
]



[project.entry-points."node_graph.node"]
"node_graph.test_float" = "node_graph.nodes.test_nodes:TestFloat"
"node_graph.test_string" = "node_graph.nodes.test_nodes:TestString"
"node_graph.test_add" = "node_graph.nodes.test_nodes:TestAdd"
"node_graph.test_enum" = "node_graph.nodes.test_nodes:TestEnum"
"node_graph.test_enum_update" = "node_graph.nodes.test_nodes:TestEnumUpdate"
"node_graph.test_add_group" = "node_graph.nodes.test_nodes:TestAddGroup"

[project.entry-points."node_graph.socket"]
"node_graph.any" = "node_graph.sockets.builtin:SocketAny"
"node_graph.int" = "node_graph.sockets.builtin:SocketInt"
"node_graph.float" = "node_graph.sockets.builtin:SocketFloat"
"node_graph.string" = "node_graph.sockets.builtin:SocketString"
"node_graph.bool" = "node_graph.sockets.builtin:SocketBool"
"node_graph.base_dict" = "node_graph.sockets.builtin:SocketBaseDict"
"node_graph.base_list" = "node_graph.sockets.builtin:SocketBaseList"
"node_graph.int_vector" = "node_graph.sockets.builtin:SocketIntVector"
"node_graph.float_vector" = "node_graph.sockets.builtin:SocketFloatVector"

[project.entry-points."node_graph.property"]
"node_graph.any" = "node_graph.properties.builtin:PropertyAny"
"node_graph.int" = "node_graph.properties.builtin:PropertyInt"
"node_graph.float" = "node_graph.properties.builtin:PropertyFloat"
"node_graph.string" = "node_graph.properties.builtin:PropertyString"
"node_graph.bool" = "node_graph.properties.builtin:PropertyBool"
"node_graph.enum" = "node_graph.properties.builtin:PropertyEnum"
"node_graph.int_vector" = "node_graph.properties.builtin:PropertyIntVector"
"node_graph.float_vector" = "node_graph.properties.builtin:PropertyFloatVector"
"node_graph.bool_vector" = "node_graph.properties.builtin:PropertyBoolVector"
"node_graph.float_matrix" = "node_graph.properties.builtin:PropertyFloatMatrix"
"node_graph.base_dict" = "node_graph.properties.builtin:PropertyBaseDict"
"node_graph.base_list" = "node_graph.properties.builtin:PropertyBaseList"
